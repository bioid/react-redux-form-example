{"version":3,"sources":["components/submit.js","components/EditPersonForm.js","mockData.js","api.js","actions/people.js","components/RemoteSubmitButton.js","App.js","serviceWorker.js","reducers/people.js","store.js","index.js"],"names":["sleep","ms","Promise","resolve","setTimeout","renderField","_ref","input","label","type","_ref$meta","meta","touched","error","editing","inputElement","react_default","a","createElement","Object","assign","placeholder","console","log","value","connectedReduxForm","reduxForm","form","onSubmit","values","then","includes","username","SubmissionError","_error","password","window","alert","concat","JSON","stringify","validate","formProps","errors","firstName","lastName","email","enableReinitialize","props","handleSubmit","fieldProps","Field","name","component","connect","state","idx","people","personSelected","person","initialValues","toConsumableArray","Array","map","_","i","id","FETCH_PEOPLE_REQUEST","FETCH_PEOPLE_SUCCESS","FETCH_PEOPLE_ERROR","PERSON_SELECTED","TOGGLE_EDITING","fetchPeople","dispatch","People","catch","fetchPeopleError","onClick","submit","App","this","event","_this","x","key","e","personClicked","className","selected","EditPersonForm","toggleEditing","components_RemoteSubmitButton","Component","Boolean","location","hostname","match","initialState","loading","createStore","combineReducers","reducer","arguments","length","undefined","action","applyMiddleware","thunk","ReactDOM","render","es","store","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c9fcb8d7.chunk.js","sourcesContent":["import { SubmissionError } from 'redux-form'\r\n\r\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nexport default function submit(values) {\r\n  return sleep(1000) // simulate server latency\r\n    .then(() => {\r\n      if (![ 'john', 'paul', 'george', 'ringo' ].includes(values.username)) {\r\n        throw new SubmissionError({ username: 'User does not exist', _error: 'Login failed!' })\r\n      } else if (values.password !== 'redux-form') {\r\n        throw new SubmissionError({ password: 'Wrong password', _error: 'Login failed!' })\r\n      } else {\r\n        window.alert(`You submitted:\\n\\n${JSON.stringify(values, null, 2)}`)\r\n      }\r\n    })\r\n}\r\n","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport submit from './submit'\r\nimport { connect } from 'react-redux';\r\n\r\nconst renderField = ({ input, label, type, meta: { touched, error }, editing }) => {\r\n  let inputElement = <input {...input} placeholder={label} type={type}/>;\r\n  console.log('passed in prop', editing)\r\n  return (\r\n    <div>\r\n      <label>{label}</label>\r\n      <div>\r\n        { editing ? inputElement : input.value }\r\n        { touched && error && <span>{ error }</span>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst RemoteSubmitForm = (props) => {\r\n  const { error, handleSubmit } = props\r\n  let fieldProps = { editing: props.editing };\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <Field name=\"firstName\" type=\"text\" component={renderField} label=\"First Name\" props={fieldProps}/>\r\n      <Field name=\"lastName\" type=\"text\" component={renderField} label=\"Last Name\" props={fieldProps}/>\r\n      <Field name=\"email\" type=\"email\" component={renderField} label=\"Email\" props={fieldProps}/>\r\n\r\n      {error && <strong>{error}</strong>}\r\n      <div>\r\n        No submit button in the form. The submit button below is a separate unlinked component.\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nfunction validate(formProps) {  \r\n  const errors = {};\r\n\r\n  if (!formProps.firstName) {\r\n    errors.firstName = 'Please enter a first name';\r\n  }\r\n\r\n  if (!formProps.lastName) {\r\n    errors.lastName = 'Please enter a last name';\r\n  }\r\n\r\n  if (!formProps.email) {\r\n    errors.email = 'Please enter an email';\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  let idx = state.people.personSelected,\r\n      person = idx !== null ? state.people.people[idx] : null;\r\n  return { \r\n    person, \r\n    initialValues: person,\r\n    editing: state.people.editing \r\n  };\r\n}\r\n\r\nconst connectedReduxForm = reduxForm({\r\n    form: 'remoteSubmit',  // a unique identifier for this form\r\n    onSubmit: submit,       // submit function must be passed to onSubmit\r\n    validate,\r\n    enableReinitialize: true\r\n})(RemoteSubmitForm)\r\n\r\nexport default connect(mapStateToProps)(connectedReduxForm)\r\n","let people = [...new Array(5)].map((_, i) => ({\r\n  firstName: 'first'+i,\r\n  lastName: 'last'+i,\r\n  id: i,\r\n  email: i+'@test.com'\r\n}));\r\n\r\nexport { people };","import { people } from './mockData';\r\n\r\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nfunction submit(values) {\r\n  return sleep(1000) // simulate server latency\r\n    .then();\r\n}\r\n\r\n\r\nfunction getAllPeople() {\r\n  return sleep(1000)\r\n    .then(\r\n      () => people\r\n    );\r\n}\r\n\r\n\r\nexport { submit, getAllPeople };\r\n","import { getAllPeople } from '../api';\r\n\r\nexport const FETCH_PEOPLE_REQUEST = 'FETCH_PEOPLE_REQUEST';\r\nexport const fetchPeopleRequest = function() {\r\n    return { type: FETCH_PEOPLE_REQUEST };\r\n};\r\n\r\nexport const FETCH_PEOPLE_SUCCESS = 'FETCH_PEOPLE_SUCCESS';\r\nexport const fetchPeopleSuccess = function(people) {\r\n  return { \r\n      type: FETCH_PEOPLE_SUCCESS, \r\n      people \r\n  };\r\n};\r\n\r\nexport const FETCH_PEOPLE_ERROR = 'FETCH_PEOPLE_ERROR';\r\nexport const fetchPeopleError = function(error) {\r\n  return {\r\n      type: FETCH_PEOPLE_ERROR,\r\n      error\r\n  }\r\n}\r\n\r\nexport const PERSON_SELECTED = 'PERSON_SELECTED';\r\nexport const personSelected = function(personId) {\r\n  return {\r\n    type: PERSON_SELECTED,\r\n    personSelected: personId\r\n  }\r\n}\r\n\r\nexport const TOGGLE_EDITING = 'TOGGLE_EDITING';\r\nexport const toggleEditing = function() {\r\n  return {\r\n    type: TOGGLE_EDITING\r\n  }\r\n}\r\n\r\nexport const fetchPeople = function() {\r\n  return function(dispatch) {\r\n      dispatch(fetchPeopleRequest());\r\n      return getAllPeople()\r\n          .then(People => dispatch(fetchPeopleSuccess(People)))\r\n          .catch(error => dispatch(fetchPeopleError(error)));\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { submit } from \"redux-form\";\r\n\r\n/*\r\n  This example demonstrates how a form may be submitted by dispatching \r\n  a SUBMIT action from an unrelated component or middleware.\r\n\r\n  The \"Submit\" button you see here is not connected to the form component\r\n  in any way; it only dispatches an action via Redux.\r\n\r\n  See docs:\r\n  https://redux-form.com/6.6.2/examples/remotesubmit/\r\n*/\r\n\r\nconst RemoteSubmitButton = ({ dispatch }) => (\r\n  <button\r\n    type=\"button\"\r\n    onClick={() => dispatch(submit(\"remoteSubmit\"))}\r\n    //                              ^^^^^^^^^^^^ name of the form\r\n  >\r\n    Submit\r\n  </button>\r\n);\r\n\r\nexport default connect()(RemoteSubmitButton);\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport EditPersonForm from \"./components/EditPersonForm\";\nimport { connect } from \"react-redux\";\nimport { fetchPeople, personSelected, toggleEditing } from \"./actions/people\";\nimport RemoteSubmitButton from \"./components/RemoteSubmitButton\";\n\nclass App extends Component {\n  componentDidMount() {\n    // dispatch an action to fetch our data from \n    // the backend and populate the store\n    this.props.dispatch(fetchPeople());\n  }\n\n  personClicked(event, id) {\n    //console.log(`person clicked, ${id}`)\n    this.props.dispatch(personSelected(id));\n  }\n\n  selected(id) {\n    return id === this.props.personSelected ? 'selected' : '';\n  }\n\n  toggleEditing() {\n    this.props.dispatch(toggleEditing())\n  }\n\n  render() {\n    const people = this.props.people.map((x,i) => (\n      <div key={x.id} onClick={ (e) => this.personClicked(e, x.id) } className={this.selected(x.id)}>\n        {x.firstName} \n        {x.lastName} \n        {x.id} \n        {x.email}\n      </div>\n    ));\n    \n    return (\n      <div>\n        <section>\n          { people }\n        </section>\n        <section>\n          <EditPersonForm />\n          { (this.props.personSelected !== null) && \n            <button onClick={e => this.toggleEditing()}>{this.props.editing ? 'Cancel' : 'Edit'}</button> \n          }\n          { this.props.editing && <RemoteSubmitButton /> }\n        </section>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    people: state.people.people,\n    personSelected: state.people.personSelected,\n    editing: state.people.editing\n  };\n}\n\nexport default connect(mapStateToProps)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  FETCH_PEOPLE_REQUEST,\r\n  FETCH_PEOPLE_SUCCESS,\r\n  FETCH_PEOPLE_ERROR,\r\n  PERSON_SELECTED,\r\n  TOGGLE_EDITING\r\n} from '../actions/people';\r\n\r\nconst initialState = {\r\n  people: [],\r\n  loading: false,\r\n  error: null,\r\n  personSelected: null,\r\n  editing: false\r\n};\r\n\r\nexport default function peopleReducer(state=initialState, action) {\r\n  /*\r\n    console.log(state);\r\n    console.log(action);\r\n  */\r\n  if (action.type === FETCH_PEOPLE_REQUEST) {\r\n      return Object.assign({}, state, {\r\n          loading: true,\r\n          error: null\r\n      });\r\n  }\r\n  if (action.type === FETCH_PEOPLE_SUCCESS) {\r\n      return Object.assign({}, state, {\r\n          loading: false,\r\n          error: null,\r\n          people: action.people\r\n      });\r\n  }\r\n  if (action.type === FETCH_PEOPLE_ERROR) {\r\n      return Object.assign({}, state, {\r\n          loading: false,\r\n          error: action.error,\r\n      });\r\n  }\r\n  if (action.type === PERSON_SELECTED) {\r\n    return Object.assign({}, state, {\r\n      personSelected: action.personSelected\r\n    });\r\n  }\r\n  if (action.type === TOGGLE_EDITING) {\r\n    return Object.assign({}, state, {\r\n      editing: !state.editing\r\n    });\r\n  }\r\n  return state;\r\n}\r\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport { reducer } from \"redux-form\";\r\nimport thunk from 'redux-thunk';\r\nimport peopleReducer from \"./reducers/people\";\r\n\r\nexport default createStore(\r\n  combineReducers({\r\n    form: reducer,\r\n    people: peopleReducer \r\n  }),\r\n  applyMiddleware(thunk)\r\n);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}