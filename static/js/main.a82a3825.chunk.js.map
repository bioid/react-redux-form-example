{"version":3,"sources":["components/submit.js","mockData.js","api.js","actions/people.js","components/RemoteSubmitButton.js","components/ViewEditPerson.js","components/PeopleGrid.js","App.js","serviceWorker.js","reducers/people.js","store.js","index.js"],"names":["sleep","ms","Promise","resolve","setTimeout","people","Object","toConsumableArray","Array","map","_","i","firstName","lastName","id","email","FETCH_PEOPLE_REQUEST","FETCH_PEOPLE_SUCCESS","FETCH_PEOPLE_ERROR","PERSON_SELECTED","TOGGLE_EDITING","fetchPeople","dispatch","type","then","fetchPeopleSuccess","catch","error","fetchPeopleError","connect","_ref","react_default","a","createElement","onClick","submit","renderField","input","label","_ref$meta","meta","touched","editing","inputElement","assign","placeholder","value","RemoteSubmitForm","this","props","_this","_this$props","handleSubmit","fieldProps","onSubmit","Field","name","component","personSelected","e","toggleEditing","components_RemoteSubmitButton","React","Component","connectedReduxForm","reduxForm","form","values","includes","username","SubmissionError","_error","password","window","alert","concat","JSON","stringify","validate","formProps","errors","enableReinitialize","state","idx","person","initialValues","PeopleGrid","headerCells","peopleCells","x","selected","Fragment","className","personClicked","length","App","components_PeopleGrid","ViewEditPerson","Boolean","location","hostname","match","initialState","loading","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","combineReducers","reducer","arguments","undefined","action","applyMiddleware","thunk","ReactDOM","render","es","store","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a82a3825.chunk.js","sourcesContent":["import { SubmissionError } from 'redux-form'\r\n\r\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nexport default function submit(values) {\r\n  return sleep(1000) // simulate server latency\r\n    .then(() => {\r\n      if (![ 'john', 'paul', 'george', 'ringo' ].includes(values.username)) {\r\n        throw new SubmissionError({ username: 'User does not exist', _error: 'Login failed!' })\r\n      } else if (values.password !== 'redux-form') {\r\n        throw new SubmissionError({ password: 'Wrong password', _error: 'Login failed!' })\r\n      } else {\r\n        window.alert(`You submitted:\\n\\n${JSON.stringify(values, null, 2)}`)\r\n      }\r\n    })\r\n}\r\n","let people = [...new Array(5)].map((_, i) => ({\r\n  firstName: 'first'+i,\r\n  lastName: 'last'+i,\r\n  id: i,\r\n  email: i+'@test.com'\r\n}));\r\n\r\nexport { people };","import { people } from './mockData';\r\n\r\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nfunction submit(values) {\r\n  return sleep(1000) // simulate server latency\r\n    .then();\r\n}\r\n\r\n\r\nfunction getAllPeople() {\r\n  return sleep(1000)\r\n    .then(\r\n      () => people\r\n    );\r\n}\r\n\r\n\r\nexport { submit, getAllPeople };\r\n","import { getAllPeople } from '../api';\r\n\r\nexport const FETCH_PEOPLE_REQUEST = 'FETCH_PEOPLE_REQUEST';\r\nexport const fetchPeopleRequest = function() {\r\n    return { type: FETCH_PEOPLE_REQUEST };\r\n};\r\n\r\nexport const FETCH_PEOPLE_SUCCESS = 'FETCH_PEOPLE_SUCCESS';\r\nexport const fetchPeopleSuccess = function(people) {\r\n  return { \r\n      type: FETCH_PEOPLE_SUCCESS, \r\n      people \r\n  };\r\n};\r\n\r\nexport const FETCH_PEOPLE_ERROR = 'FETCH_PEOPLE_ERROR';\r\nexport const fetchPeopleError = function(error) {\r\n  return {\r\n      type: FETCH_PEOPLE_ERROR,\r\n      error\r\n  }\r\n}\r\n\r\nexport const PERSON_SELECTED = 'PERSON_SELECTED';\r\nexport const personSelected = function(personId) {\r\n  return {\r\n    type: PERSON_SELECTED,\r\n    personSelected: personId\r\n  }\r\n}\r\n\r\nexport const TOGGLE_EDITING = 'TOGGLE_EDITING';\r\nexport const toggleEditing = function() {\r\n  return {\r\n    type: TOGGLE_EDITING\r\n  }\r\n}\r\n\r\nexport const fetchPeople = function() {\r\n  return function(dispatch) {\r\n      dispatch(fetchPeopleRequest());\r\n      return getAllPeople()\r\n          .then(people => dispatch(fetchPeopleSuccess(people)))\r\n          .catch(error => dispatch(fetchPeopleError(error)));\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { submit } from \"redux-form\";\r\n\r\n/*\r\n  This example demonstrates how a form may be submitted by dispatching \r\n  a SUBMIT action from an unrelated component or middleware.\r\n\r\n  The \"Submit\" button you see here is not connected to the form component\r\n  in any way; it only dispatches an action via Redux.\r\n\r\n  See docs:\r\n  https://redux-form.com/6.6.2/examples/remotesubmit/\r\n*/\r\n\r\nconst RemoteSubmitButton = ({ dispatch }) => (\r\n  <button\r\n    type=\"button\"\r\n    onClick={() => dispatch(submit(\"remoteSubmit\"))}\r\n    //                              ^^^^^^^^^^^^ name of the form\r\n  >\r\n    Submit\r\n  </button>\r\n);\r\n\r\nexport default connect()(RemoteSubmitButton);\r\n","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport submit from './submit'\r\nimport { connect } from 'react-redux';\r\nimport { toggleEditing } from \"../actions/people\";\r\nimport RemoteSubmitButton from './RemoteSubmitButton';\r\nconst renderField = ({ input, label, type, meta: { touched, error }, editing }) => {\r\n  /*\r\n   The `editing` key we are destructuring here is the result of passing `fieldProps`\r\n   to the `props` attribute when declaring the Field below.\r\n   This `editing` variable is then what we use to decide whether to\r\n   show an input or just the value (input.value).\r\n  */\r\n  let inputElement = <input {...input} placeholder={label} type={type}/>;\r\n  return (\r\n    <div>\r\n      <label>{label}</label>\r\n      <div>\r\n        { editing ? inputElement : input.value }\r\n        { touched && error && <span>{ error }</span>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nclass RemoteSubmitForm extends React.Component {\r\n  toggleEditing() {\r\n    this.props.dispatch(toggleEditing());\r\n  }\r\n\r\n  render() {\r\n    const { error, handleSubmit } = this.props;\r\n    let fieldProps = { editing: this.props.editing };\r\n    /*\r\n      We'll use this `fieldProps` object to pass the current editing state\r\n      into each field. It will be passed through the `props` attribute, \r\n      and redux-form will merge with the other props at the top level.\r\n    */\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n        <Field name=\"firstName\" type=\"text\" component={renderField} label=\"First Name\" props={fieldProps}/>\r\n        <Field name=\"lastName\" type=\"text\" component={renderField} label=\"Last Name\" props={fieldProps}/>\r\n        <Field name=\"email\" type=\"email\" component={renderField} label=\"Email\" props={fieldProps}/>\r\n  \r\n        {error && <strong>{error}</strong>}\r\n  \r\n        {this.props.personSelected !== null && (\r\n              <button type=\"button\" onClick={e => this.toggleEditing()}>\r\n                {this.props.editing ? \"Cancel\" : \"Edit\"}\r\n              </button>\r\n        )}\r\n\r\n        {this.props.editing && <RemoteSubmitButton />}\r\n\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nfunction validate(formProps) {  \r\n  const errors = {};\r\n\r\n  if (!formProps.firstName) {\r\n    errors.firstName = 'Please enter a first name';\r\n  }\r\n\r\n  if (!formProps.lastName) {\r\n    errors.lastName = 'Please enter a last name';\r\n  }\r\n\r\n  if (!formProps.email) {\r\n    errors.email = 'Please enter an email';\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  let idx = state.people.personSelected,\r\n      person = idx !== null ? state.people.people[idx] : null;\r\n  return { \r\n    person, \r\n    initialValues: person, // props.initialValues is used by redux-form to populate the form\r\n    editing: state.people.editing,\r\n    personSelected: state.people.personSelected\r\n  };\r\n}\r\n\r\nconst connectedReduxForm = reduxForm({\r\n    form: 'remoteSubmit',  // a unique identifier for this form\r\n    onSubmit: submit,       // submit function must be passed to onSubmit\r\n    validate,\r\n    enableReinitialize: true // When set to true, the form will reinitialize every time the initialValues\r\n})(RemoteSubmitForm)\r\n\r\nexport default connect(mapStateToProps)(connectedReduxForm)\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { personSelected } from \"../actions/people\";\r\n\r\nclass PeopleGrid extends React.Component {\r\n\r\n  personClicked(id) {\r\n    this.props.dispatch(personSelected(id));\r\n  }\r\n\r\n  selected(id) {\r\n    return id === this.props.personSelected ? \"selected\" : \"\";\r\n  }\r\n\r\n  render() {\r\n    const peopleCells = this.props.people.map((x, i) => {\r\n      let selected = this.props.personSelected === i ? 'selected' : '';\r\n      return (\r\n        <React.Fragment>\r\n          <div className={`cell id ${selected}`} onClick={e => this.personClicked(x.id)}>\r\n            {x.id}\r\n          </div>\r\n          <div className={`cell firstName ${selected}`} onClick={e => this.personClicked(x.id)}>\r\n            {x.firstName}\r\n          </div>\r\n          <div className={`cell lastName ${selected}`} onClick={e => this.personClicked(x.id)}>\r\n            {x.lastName}\r\n          </div>\r\n          <div className={`cell email ${selected}`} onClick={e => this.personClicked(x.id)}>\r\n            {x.email}\r\n          </div>\r\n        </React.Fragment>\r\n    )});\r\n    let headerCells;\r\n    if (this.props.people.length > 0) {\r\n      headerCells = (\r\n        <React.Fragment>\r\n          <div className=\"cell header id\">id</div>\r\n          <div className=\"cell header firstName\">First Name</div>\r\n          <div className=\"cell header lastName\">Last Name</div>\r\n          <div className=\"cell header email\">Email</div>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n    return (\r\n        <div className=\"peoplegrid\">\r\n          {headerCells}\r\n          {peopleCells}\r\n        </div>\r\n    );    \r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    people: state.people.people,\r\n    personSelected: state.people.personSelected\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps)(PeopleGrid);","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ViewEditPerson from \"./components/ViewEditPerson\";\nimport { connect } from \"react-redux\";\nimport { fetchPeople } from \"./actions/people\";\nimport PeopleGrid from \"./components/PeopleGrid\";\n\nclass App extends Component {\n  componentDidMount() {\n    // dispatch an action to fetch our data from\n    // the backend and populate the store\n    this.props.dispatch(fetchPeople());\n  }\n\n  \n  render() {\n    return (\n      <div>\n        <PeopleGrid />\n        <section>\n          <ViewEditPerson />\n        </section>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    people: state.people.people,\n    personSelected: state.people.personSelected,\n    editing: state.people.editing\n  };\n}\n\nexport default connect(mapStateToProps)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  FETCH_PEOPLE_REQUEST,\r\n  FETCH_PEOPLE_SUCCESS,\r\n  FETCH_PEOPLE_ERROR,\r\n  PERSON_SELECTED,\r\n  TOGGLE_EDITING\r\n} from '../actions/people';\r\n\r\nconst initialState = {\r\n  people: [],\r\n  loading: false,\r\n  error: null,\r\n  personSelected: null,\r\n  editing: false\r\n};\r\n\r\nexport default function peopleReducer(state=initialState, action) {\r\n  /*\r\n    console.log(state);\r\n    console.log(action);\r\n  */\r\n  if (action.type === FETCH_PEOPLE_REQUEST) {\r\n      return Object.assign({}, state, {\r\n          loading: true,\r\n          error: null\r\n      });\r\n  }\r\n  if (action.type === FETCH_PEOPLE_SUCCESS) {\r\n      return Object.assign({}, state, {\r\n          loading: false,\r\n          error: null,\r\n          people: action.people\r\n      });\r\n  }\r\n  if (action.type === FETCH_PEOPLE_ERROR) {\r\n      return Object.assign({}, state, {\r\n          loading: false,\r\n          error: action.error,\r\n      });\r\n  }\r\n  if (action.type === PERSON_SELECTED) {\r\n    return Object.assign({}, state, {\r\n      personSelected: action.personSelected\r\n    });\r\n  }\r\n  if (action.type === TOGGLE_EDITING) {\r\n    return Object.assign({}, state, {\r\n      editing: !state.editing\r\n    });\r\n  }\r\n  return state;\r\n}\r\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport { reducer } from \"redux-form\";\r\nimport thunk from 'redux-thunk';\r\nimport peopleReducer from \"./reducers/people\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default createStore(\r\n  combineReducers({\r\n    form: reducer,\r\n    people: peopleReducer \r\n  }),\r\n  composeEnhancers(\r\n    applyMiddleware(thunk)\r\n  )\r\n);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}